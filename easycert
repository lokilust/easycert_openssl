#!/bin/bash

EASYCERT_CONFIG="$HOME/.easycertrc"
GREEN="\033[32m"
COLOR_END="\033[0m"

if [ -f "$EASYCERT_CONFIG" ]; then . "$EASYCERT_CONFIG"; fi

if [ ! -f "$EASYCERT_CONFIG" ]; then 
    echo "Creating $EASYCERT_CONFIG is required!"
    echo "Should be in format of:\n"
    echo "EASYCERT_COUNTRY=\"US\""
    echo "EASYCERT_STATE=\"California\""
    echo "EASYCERT_LOCALITY=\"Mountain View\""
    echo "EASYCERT_ORGANIZATION=\"Catchvar\""
    echo "EASYCERT_UNIT=\"Studio\""
    echo "EASYCERT_COMMON_NAME=\"localhost\""
    echo "EASYCERT_EMAIL=\"youremail@gmail.com\""
    echo "EASYCERT_UNSTRUCTURED=\"Catchvar\"\n"
    exit
fi

create_cfg()
{
    LOCATION=$1
    CA_DIR=$2

    cat > "${LOCATION}/openssl.cfg" << EOL
#
# OpenSSL example configuration file.
# This is mostly being used for generation of certificate requests.
#

# This definition stops the following lines choking if HOME isn't
# defined.
HOME			= .
RANDFILE		= \$ENV::HOME/.rnd

# Extra OBJECT IDENTIFIER info:
#oid_file		= \$ENV::HOME/.oid
oid_section		= new_oids

# To use this configuration file with the "-extfile" option of the
# "openssl x509" utility, name here the section containing the
# X.509v3 extensions to use:
# extensions		= 
# (Alternatively, use a configuration file that has only
# X.509v3 extensions in its main [= default] section.)

[ new_oids ]

# We can add new OIDs in here for use by 'ca' and 'req'.
# Add a simple OID like this:
# testoid1=1.2.3.4
# Or use config file substitution like this:
# testoid2=\${testoid1}.5.6

####################################################################
[ ca ]
default_ca	= CA_default		# The default ca section

####################################################################
[ CA_default ]

dir		= $CA_DIR		# Where everything is kept
certs		= \$dir/certs		# Where the issued certs are kept
crl_dir		= \$dir/crl		# Where the issued crl are kept
database	= \$dir/index.txt	# database index file.
new_certs_dir	= \$dir/newcerts		# default place for new certs.

certificate	= \$dir/cacert.pem 	# The CA certificate
serial		= \$dir/serial 		# The current serial number
crl		= \$dir/crl.pem 		# The current CRL
private_key	= \$dir/private/cakey.pem       # The private key
RANDFILE	= \$dir/private/.rand	# private random number file

x509_extensions	= usr_cert		# The extentions to add to the cert

# Extensions to add to a CRL. Note: Netscape communicator chokes on V2 CRLs
# so this is commented out by default to leave a V1 CRL.
# crl_extensions	= crl_ext

default_days	= 365			# how long to certify for
default_crl_days= 30			# how long before next CRL
# SHA-1 is deprecated, so use SHA-2 instead.
default_md          = sha256
preserve	= no			# keep passed DN ordering

# A few difference way of specifying how similar the request should look
# For type CA, the listed attributes must be the same, and the optional
# and supplied fields are just that :-)
policy		= policy_match

# For the CA policy
[ policy_match ]
countryName		= match
stateOrProvinceName	= match
organizationName	= match
organizationalUnitName	= optional
commonName		= supplied
emailAddress		= optional

# For the 'anything' policy
# At this point in time, you must list all acceptable 'object'
# types.
[ policy_anything ]
countryName		= optional
stateOrProvinceName	= optional
localityName		= optional
organizationName	= optional
organizationalUnitName	= optional
commonName		= supplied
emailAddress		= optional

####################################################################
[ req ]
default_bits		= 1024
default_keyfile 	= privkey.pem
distinguished_name	= req_distinguished_name
attributes		= req_attributes
x509_extensions	= v3_ca	# The extentions to add to the self signed cert

# Passwords for private keys if not present they will be prompted for
# input_password = secret
# output_password = secret

# This sets a mask for permitted string types. There are several options. 
# default: PrintableString, T61String, BMPString.
# pkix	 : PrintableString, BMPString.
# utf8only: only UTF8Strings.
# nombstr : PrintableString, T61String (no BMPStrings or UTF8Strings).
# MASK:XXXX a literal mask value.
# WARNING: current versions of Netscape crash on BMPStrings or UTF8Strings
# so use this option with caution!
string_mask = nombstr

# req_extensions = v3_req # The extensions to add to a certificate request

[ req_distinguished_name ]
countryName			= Country Name (2 letter code)
countryName_default		= $EASYCERT_COUNTRY
countryName_min			= 2
countryName_max			= 2

stateOrProvinceName		= State or Province Name (full name)
stateOrProvinceName_default	= $EASYCERT_STATE

localityName			= Locality Name (eg, city)
localityName_default            = $EASYCERT_LOCALITY

0.organizationName		= Organization Name (eg, company)
0.organizationName_default	= $EASYCERT_ORGANIZATION

# we can do this but it is not needed normally :-)
#1.organizationName		= Second Organization Name (eg, company)
#1.organizationName_default	= World Wide Web Pty Ltd

organizationalUnitName		= Organizational Unit Name (eg, section)
organizationalUnitName_default	= $EASYCERT_UNIT

commonName			= Common Name (eg, YOUR name)
commonName_max			= 64
commonName_default              = $EASYCERT_COMMON_NAME

emailAddress			= Email Address
emailAddress_max		= 40
emailAddress_default            = $EASYCERT_EMAIL

# SET-ex3			= SET extension number 3

[ req_attributes ]
challengePassword		= A challenge password
challengePassword_min		= 4
challengePassword_max		= 20

unstructuredName		= An optional company name
unstructuredName_default        = $EASYCERT_UNSTRUCTURED

[ usr_cert ]

# These extensions are added when 'ca' signs a request.

# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.

basicConstraints=CA:FALSE

# Here are some examples of the usage of nsCertType. If it is omitted
# the certificate can be used for anything *except* object signing.

# This is OK for an SSL server.
# nsCertType			= server

# For an object signing certificate this would be used.
# nsCertType = objsign

# For normal client use this is typical
# nsCertType = client, email

# and for everything including object signing:
# nsCertType = client, email, objsign

# This is typical in keyUsage for a client certificate.
# keyUsage = nonRepudiation, digitalSignature, keyEncipherment

# This will be displayed in Netscape's comment listbox.
nsComment			= "OpenSSL Generated Certificate"

# PKIX recommendations harmless if included in all certificates.
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid,issuer:always

# This stuff is for subjectAltName and issuerAltname.
# Import the email address.
# subjectAltName=email:copy

# Copy subject details
# issuerAltName=issuer:copy

#nsCaRevocationUrl		= http://www.domain.dom/ca-crl.pem
#nsBaseUrl
#nsRevocationUrl
#nsRenewalUrl
#nsCaPolicyUrl
#nsSslServerName

[ v3_req ]

# Extensions to add to a certificate request

basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment

[ v3_ca ]


# Extensions for a typical CA


# PKIX recommendation.

subjectKeyIdentifier=hash

authorityKeyIdentifier=keyid:always,issuer:always

# This is what PKIX recommends but some broken software chokes on critical
# extensions.
#basicConstraints = critical,CA:true
# So we do this instead.
basicConstraints = CA:true

# Key usage: this is typical for a CA certificate. However since it will
# prevent it being used as an test self-signed certificate it is best
# left out by default.
# keyUsage = cRLSign, keyCertSign

# Some might want this also
# nsCertType = sslCA, emailCA

# Include email address in subject alt name: another PKIX recommendation
# subjectAltName=email:copy
# Copy issuer details
# issuerAltName=issuer:copy

# DER hex encoding of an extension: beware experts only!
# obj=DER:02:03
# Where 'obj' is a standard or added object
# You can even override a supported extension:
# basicConstraints= critical, DER:30:03:01:01:FF

[ crl_ext ]

# CRL extensions.
# Only issuerAltName and authorityKeyIdentifier make any sense in a CRL.

# issuerAltName=issuer:copy
authorityKeyIdentifier=keyid:always,issuer:always
EOL

}

create_dirs()
{
    DIR_ROOT=$1

    echo -e "${GREEN}Generating directory structure... $DIR_ROOT${COLOR_END}"
    if [ ! -d "$DIR_ROOT" ]; then mkdir "$DIR_ROOT"; fi
    if [ ! -d "$DIR_ROOT/certs" ]; then mkdir "$DIR_ROOT/certs"; fi
    if [ ! -d "$DIR_ROOT/crl" ]; then mkdir "$DIR_ROOT/crl"; fi
    if [ ! -d "$DIR_ROOT/newcerts" ]; then mkdir "$DIR_ROOT/newcerts"; fi
    if [ ! -d "$DIR_ROOT/private" ]; then 
        mkdir "$DIR_ROOT/private" 
        chmod 700 "$DIR_ROOT/private"
    fi
    if [ ! -f "$DIR_ROOT/index.txt" ]; then touch "$DIR_ROOT/index.txt"; fi
    if [ ! -f "$DIR_ROOT/serial" ]; then echo 1000 > "$DIR_ROOT/serial"; fi
    
    create_cfg "${DIR_ROOT}" "${DIR_ROOT}"
}

create-ca-cert()
{
    cd "$ROOT_DIR"
    echo -e "${GREEN}Generating ca root key...${COLOR_END}"
    openssl genrsa -aes256 -out "$ROOT_DIR/private/ca.key.pem" 4096
    chmod 400 "$ROOT_DIR/private/ca.key.pem"

    echo -e "${GREEN}Generating ca root certificate...${COLOR_END}"
    openssl req -new -x509 -days 3650 -key "$ROOT_DIR/private/ca.key.pem" -extensions v3_ca -out "$ROOT_DIR/certs/ca.cert.pem" -config "$ROOT_DIR/openssl.cfg"
    chmod 444 "$ROOT_DIR/certs/ca.cert.pem"
}

create-intermediate-cert()
{
    cd "$ROOT_DIR"

    echo -e "${GREEN}generating intermediate key...${COLOR_END}"
    INTERMEDIATE_KEY_PATH="$ROOT_DIR/intermediate/private/intermediate.key.pem"
    openssl genrsa -aes256 -out "$INTERMEDIATE_KEY_PATH" 4096
    chmod 400 "$INTERMEDIATE_KEY_PATH"

    echo -e "${GREEN}generating intermediate request...${COLOR_END}"
    INTERMEDIATE_CSR_PATH="$ROOT_DIR/intermediate/certs/intermediate.csr.pem"
    openssl req -config "$ROOT_DIR/openssl.cfg" -new -key "$INTERMEDIATE_KEY_PATH" -out "$INTERMEDIATE_CSR_PATH"

    echo -e "${GREEN}issuing intermediate certificate...${COLOR_END}"
    ROOT_CERT_PATH="$ROOT_DIR/certs/ca.cert.pem"
    INTERMEDIATE_CERT_PATH="$ROOT_DIR/intermediate/certs/intermediate.cert.pem"
    openssl ca -config "$ROOT_DIR/openssl.cfg" -keyfile "$ROOT_DIR/private/ca.key.pem" -cert "$ROOT_CERT_PATH" -extensions v3_ca -notext -md sha1 -in "$INTERMEDIATE_CSR_PATH" -out "$INTERMEDIATE_CERT_PATH"
    chmod 444 "$INTERMEDIATE_CERT_PATH"

    echo -e "${GREEN}verifying intermediate certificate...${COLOR_END}"
    openssl verify -CAfile "$ROOT_CERT_PATH" "$INTERMEDIATE_CERT_PATH"

    echo -e "${GREEN}creating ca chain certificate...${COLOR_END}"
    cat "$INTERMEDIATE_CERT_PATH" "$ROOT_CERT_PATH" > "$ROOT_DIR/intermediate/certs/ca-chain.cert.pem"

}

create-server-cert()
{
    INTERMEDIATE_DIR="$ROOT_DIR/intermediate"

    cd "$ROOT_DIR"

    echo -e "${GREEN}generating server private key...${COLOR_END}"
    SERVER_KEY_PATH="$INTERMEDIATE_DIR/private/${EASYCERT_COMMON_NAME}.key.pem"
    openssl genrsa -out "$SERVER_KEY_PATH" 4096
    chmod 400 "$SERVER_KEY_PATH"

    echo -e "${GREEN}generating certificate signing request...${COLOR_END}"
    SERVER_CSR_PATH="$INTERMEDIATE_DIR/certs/${EASYCERT_COMMON_NAME}.csr.pem"
    openssl req -new -key "$SERVER_KEY_PATH" -out "$SERVER_CSR_PATH" -config "$INTERMEDIATE_DIR/openssl.cfg"

    echo -e "${GREEN}Sign csr and issue server certificate...${COLOR_END}"
    SERVER_CERT_PATH="$INTERMEDIATE_DIR/certs/${EASYCERT_COMMON_NAME}.cert.pem"
    openssl ca -keyfile "$INTERMEDIATE_DIR/private/intermediate.key.pem" -cert "$INTERMEDIATE_DIR/certs/intermediate.cert.pem" -notext -md sha1 -in "$SERVER_CSR_PATH" -out "$SERVER_CERT_PATH" -config "$INTERMEDIATE_DIR/openssl.cfg"
    chmod 444 "$SERVER_CERT_PATH"

    echo -e "${GREEN}Verifying server certificate...{$COLOR_END}"
    openssl verify -CAfile "$INTERMEDIATE_DIR/certs/ca-chain.cert.pem" "$SERVER_CERT_PATH"

}

print_cert_path()
{
    echo -e "${GREEN}ca:                $ROOT_DIR/certs/ca.cert.pem${COLOR_END}"
    echo -e "${GREEN}intermediate:      $ROOT_DIR/intermediate/certs/intermediate.cert.pem${COLOR_END}"
    echo -e "${GREEN}server key:        $ROOT_DIR/intermediate/private/${EASYCERT_COMMON_NAME}.key.pem"
    echo -e "${GREEN}server:            $ROOT_DIR/intermediate/certs/${EASYCERT_COMMON_NAME}.cert.pem${COLOR_END}"
    echo -e "${GREEN}ca-chain:          $ROOT_DIR/intermediate/certs/ca-chain.cert.pem${COLOR_END}"

}

case $1 in
    create-authority)
        ROOT_DIR=$2

        create_dirs "$ROOT_DIR"
        create_dirs "$ROOT_DIR/intermediate"
    ;;

    create-ca-chain)
        ROOT_DIR=$2
        create-ca-cert "$ROOT_DIR"
        create-intermediate-cert "$ROOT_DIR"
    ;;

    create-server-cert)
        ROOT_DIR=$2
        create-server-cert "$ROOT_DIR"
    ;;

    create-all)
        ROOT_DIR=$2

        create_dirs "$ROOT_DIR"
        create_dirs "$ROOT_DIR/intermediate"
        create-ca-cert "$ROOT_DIR"
        create-intermediate-cert "$ROOT_DIR"
        create-server-cert "$ROOT_DIR"
    ;;

    clean-server-cert)
        ROOT_DIR=$2

        for file in `find "$ROOT_DIR" -name "${EASYCERT_COMMON_NAME}*"`; do rm $file; done
    ;;

    find)
        ROOT_DIR=$2
        print_cert_path
    ;;

    * )
        echo "easycert: create your own certificate authority easy"
        echo "usage: $0 <command> [options...]"
        echo ""
        echo "<command>      Command to be executed"
        echo ""
        echo "Valid commands are:"
        echo "  create-authority <dir>          creates directory root at dir"
        echo "  create-ca-chain <root>          creates ca certificate chain"
        echo "  create-server-cert <root>       creates the server certificate"
        echo "  create-all <dir>                creates everything"
        echo "  clean-server-cert <root>        erases all server cert files"
        echo "  find <root>                     prints paths to certs"
        exit
    ;;

esac

echo -e "${GREEN}done.${COLOR_END}"

